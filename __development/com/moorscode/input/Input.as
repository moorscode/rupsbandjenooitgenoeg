package com.moorscode.input {	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;		import flash.geom.Point;		import flash.ui.Mouse;		import com.moorscode.game.GameCamera;		public class Input {				private static var keys:Object = new Object();	// Object to hold the keycodes of keys which are pressed.		private static var __mouseCoords:Point = new Point(-1, -1);	// X position of the mouse		public static var mouseDown:Boolean = false;	// Is the mouse button down (true) or not? (false)		public static var mouseTarget:DisplayObject = null; // Mouse target from the last mouseclick event				private static var cursor:Sprite;				private static var __stage:Stage;				// Initialize, this will add the event listeners to the Stage.		public static function initialize(stage:Stage):void {			// Assign listeners for key presses.			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyboard);			stage.addEventListener(KeyboardEvent.KEY_UP, keyboard);						// Assign a listener for when the mouse moves.			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouse);			// Assign a listener for mouse button presses.			stage.addEventListener(MouseEvent.MOUSE_DOWN, mouse);			stage.addEventListener(MouseEvent.MOUSE_UP, mouse);			// Assign a listener to clear all keys when the swf loses focus.			stage.addEventListener(Event.DEACTIVATE, clearInput);						cursor = new Sprite();			cursor.mouseChildren = false;			cursor.mouseEnabled = false;						__stage = stage;		}				// KEYBOARD		private static function keyboard(event:KeyboardEvent):void {			switch(event.type) {				case KeyboardEvent.KEY_UP:					if(event.keyCode in keys) {						delete keys[event.keyCode];					}					break;				case KeyboardEvent.KEY_DOWN:					keys[event.keyCode] = true;					break;			}						__stage.focus = __stage;		}				public static function keyDown(keyCode:uint):Boolean {			return Boolean(keyCode in keys);		}				private static function mouse(event:MouseEvent):void {			switch(event.type) {				case MouseEvent.MOUSE_DOWN:					mouseDown = true;					//mouseTarget = DisplayObject(event.target);					break;				case MouseEvent.MOUSE_MOVE:					__mouseCoords.x = event.stageX;					__mouseCoords.y = event.stageY;										cursor.x = event.stageX;					cursor.y = event.stageY;										break;				case MouseEvent.MOUSE_UP:					mouseDown = false;					//mouseTarget = null;					break;			}						__stage.focus = __stage;		}				public static function setCursor(newCursor:* = null):void {			return;									if(cursor.numChildren > 0) {				cursor.removeChildAt(0);			}						if(newCursor) {				cursor.addChild(newCursor);				if(!__stage.contains(cursor)) {					__stage.addChild(cursor);				}								Mouse.hide();							} else {				if(__stage.contains(cursor)) {					__stage.removeChild(cursor);				}								Mouse.show();			}		}				public static function get mouseCoords():Point {			var world:Point = new Point();			world.x = __mouseCoords.x + GameCamera.x;			world.y = __mouseCoords.y + GameCamera.y;			return world;		}				public static function clearInput(event:Event = null):void {			// Clear all keys down			keys = new Object();						// Set mouseDown to false			mouseDown = false;			mouseTarget = null;		}		/*		public static function checkMouseOn(Target:DisplayObject):Boolean {			return Target.hitTestPoint(mouseCoords.x, mouseCoords.y, true);		}		*/	}}
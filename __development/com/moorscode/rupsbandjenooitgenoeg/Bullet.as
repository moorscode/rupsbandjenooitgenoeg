package com.moorscode.rupsbandjenooitgenoeg {	import flash.display.Sprite;	import flash.geom.Point;	import flash.filters.DropShadowFilter;	import flash.filters.BitmapFilterQuality;		import com.moorscode.game.IGameObject;	import com.moorscode.game.GameObjectEvent;		public class Bullet extends IGameObject {		private var bullet:Sprite;				private var ownerId:uint = 0;		private var bulletId:uint = 0;				private static var bulletsFired:uint = 0;				public function Bullet(position:Point, direction:Number, oid:uint = 0, bid:uint = 0):void {			super(position);						this.bullet = Sprite(addChild(getSprite("bulletGfx")));						rotation = targetRotation = direction;			this.ownerId = oid;						if(bid == 0) {				// this is a local bullet - handle accordingly:				this.bulletId = ++Bullet.bulletsFired;			} else {				this.bulletId = bid;			}						maxSpeed = 7;			minSpeed = 5;						occlusion = false;						this.speed = maxSpeed;			slowdownSpeed = 0.99;		}				public function get owner():uint {			return ownerId;		}				public function get identifier():uint {			return this.bulletId;		}				override public function toString():String {			return ""+ownerId+"|"+bulletId+"";		}				override public function hitRadius():Number {			return 1;		}				override public function unload():void {			super.unload();			bullet = null;		}				override public function tick():void {			super.tick();						if(!alive) {				unload();			}						if(speed < minSpeed) {				var destroyMe:GameObjectEvent = new GameObjectEvent(GameObjectEvent.DESTROYED);				destroyMe.targetObject = this;				destroyMe.origin = new Point(this.x, this.y);				destroyMe.ownerId = ownerId;				dispatchEvent(destroyMe);								return;				//unload();			}						var myFilters:Array = this.filters;			if(myFilters.length > 0) {				for each(var filter in myFilters) {					if(filter is DropShadowFilter) {						filter.distance = 10 * ((1/(maxSpeed-minSpeed)) * (speed-minSpeed));					}				}			}						this.filters = myFilters;		}	}}
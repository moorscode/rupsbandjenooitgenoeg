package com.moorscode.rupsbandjenooitgenoeg {	import flash.display.Sprite;	import flash.display.MovieClip;		import flash.events.Event;		import flash.geom.Point;		import flash.utils.getTimer;		import com.moorscode.net.NetController;	import com.moorscode.net.NetEvent;		import com.moorscode.game.GameObjectList;	import com.moorscode.game.GameObjectEvent;		import com.moorscode.game.GameTimer;		public class NetPlayerTank extends Tank {		private var lastUpdate:uint;				public function NetPlayerTank(playerId:int, rank:int = 0):void {			super(null, 10, true);						totalHitpoints = hitpoints = 10;						accelerateSpeed = 0.07;			turnSpeed = 4;			shootingRange = 160;						turretTurnSpeed = 5;			targetTurretDirection = turretDirection = 0;						updateAudio(0.6, 0);						occlusion = false;			this.playerId = playerId;						setRank(rank);						lastUpdate = getTimer();						NetController.addEventListener(NetEvent.DATA, handleData, false, 0, true);		}				public override function updateGfx():void {			super.updateGfx();						if(getTimer() - lastUpdate > 5000) {				this.alpha = 0.3;			} else if(this.alpha < 1.0) {				this.alpha = 1.0;			}		}				private function handleData(event:NetEvent):void {			var xmlData:XML = event.xml;						// only do stuff for me!			var what = xmlData.w;			var tickTime:Number = 25;						if(what == "player") {				if(playerId == int(xmlData.i)) {					setPosition(new Point(Number(xmlData.p.x), Number(xmlData.p.y)));										this.rotation = Number(Math.round(xmlData.rot * 100) / 100);										if(xmlData.hp != this.HP) {						this.HP = xmlData.hp;						dispatchEvent(new Event("hpChange"));					}										/*					var acc:int = int(xmlData.acc);					switch(acc) {						case 1:							accelerate();							break;						case -1:							decelerate();							break;						case 0:							stationary();							break;					}					*/										this.speed = Number(xmlData.spd);										this.turretRotation = Math.round(xmlData.trd * 100) / 100;					this.turrentTargetRotation = Math.round(xmlData.trtd * 100) / 100;										this.lastTarget = new Point(Number(xmlData.tar.x), Number(xmlData.tar.y));										this.travelDistance = xmlData.d;										if(parent) {						tickTime = rupsbandjenooitgenoeg(parent).tickTime;												var fforward:int = Math.min( Math.floor((GameTimer.time - xmlData.time) / tickTime), 10 );						for(var f:uint = 0; f < fforward; f++) {							this.tick();						}					}										// trace(getTimer() - lastUpdate + ' since last update');					lastUpdate = getTimer();				}			}						if(what == "shoot") {				if(playerId == int(xmlData.i)) {										if(parent) {						tickTime = rupsbandjenooitgenoeg(parent).tickTime;					}										var shootEvent:GameObjectEvent 	= new GameObjectEvent(GameObjectEvent.SHOOT);						shootEvent.targetObject 	= this;						shootEvent.origin 			= new Point(xmlData.p.x, xmlData.p.y);						shootEvent.rotation 		= xmlData.r;						shootEvent.speed 			= xmlData.s;						shootEvent.ownerId 			= int(xmlData.i);						shootEvent.bulletId 		= int(xmlData.bid);						shootEvent.fforward 		= Math.min( Math.floor((GameTimer.time - xmlData.time) / tickTime), 10 );										dispatchEvent(shootEvent);				}			}						if(what == "remove") {				if(playerId == int(xmlData.i)) {					alive = false;										var removeEvent:GameObjectEvent = new GameObjectEvent(GameObjectEvent.REMOVE);						removeEvent.ownerId = playerId;										dispatchEvent(removeEvent);				}			}						if(what == "died") {				if(playerId == int(xmlData.i)) {					forceDie();				}			}		}				public function forceDie():void {			alive = false;						var deathEvent:GameObjectEvent = new GameObjectEvent(GameObjectEvent.DESTROYED);				deathEvent.targetObject = this;				deathEvent.ownerId = playerId;						dispatchEvent(deathEvent);		}				override protected function updateDistance():void {			// don't update, only recieve updates from the net!		}				public function set HP(value:uint):void {			hitpoints = value;						if(hitpoints == 0) {				die();			}		}				override public function hit():void {			// hitpoints--;			// don't check for 0 HP, wait for server to dispatch DEATH event		}				override public function set rotation(newRotation:Number):void {			if(!isNaN(newRotation)) {				super.rotation = targetRotation = newRotation;			}		}	}}
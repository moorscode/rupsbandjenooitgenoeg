package com.moorscode.sound {	import flash.display.*;	import flash.geom.Matrix;	import flash.events.Event;		import com.moorscode.sound.VolumeData;		public class DisplayVolume extends Sprite {		private var volumeData:VolumeData = new VolumeData();		private var displayMode:String = 'vertical';				private var barWidth:Number;		private var barHeight:Number;		private var barSeperator:Number;				private var previousVolume:Array;				private var smooth:Boolean = true;				private var yellowPercentage:Number = 0.7;		private var redPercentage:Number = 0.9;				public function DisplayVolume(barWidth:Number, barHeight:Number, displayMode:String = "vertical", smooth:Boolean = true):void {			this.displayMode = displayMode;						if(displayMode == "vertical") {				barSeperator = barWidth * 0.05;				this.barWidth = (barWidth - barSeperator) / 2.0;				this.barHeight = barHeight;			} else {				barSeperator = barHeight * 0.05;				this.barWidth = barWidth;				this.barHeight = (barHeight - barSeperator) / 2.0			}						this.smooth = smooth;						addEventListener(Event.ENTER_FRAME, update);		}				private function update(event:Event):void {			var volume:Array = volumeData.getSpectrum();			var left:Number = volume['left'];			var right:Number = volume['right'];						if(previousVolume && smooth) {				left = (left + previousVolume['left']) / 2.0;				right = (right + previousVolume['right']) / 2.0;			}						graphics.clear();						var matr:Matrix = new Matrix();						graphics.lineStyle(1, 0x0);						if(displayMode == 'vertical') {				matr.createGradientBox(barWidth, barHeight, Math.PI*1.5, 0, 0);				graphics.beginGradientFill(GradientType.LINEAR, [0x9ACD32, 0xFF4500, 0xCD0000], [1.0, 1.0, 1.0], [0, 180, 220], matr);				graphics.drawRect(0, barHeight - (barHeight * left), barWidth, (barHeight * left));				graphics.endFill();								// right:				graphics.beginGradientFill(GradientType.LINEAR, [0x9ACD32, 0xFF4500, 0xCD0000], [1.0, 1.0, 1.0], [0, 180, 220], matr);				graphics.drawRect(barWidth + barSeperator, barHeight - (barHeight * right), barWidth, (barHeight * right));				graphics.endFill();			} else {				matr.createGradientBox(barWidth, barHeight, Math.PI*2, 0, 0);				graphics.beginGradientFill(GradientType.LINEAR, [0x9ACD32, 0xFF4500, 0xCD0000], [1.0, 1.0, 1.0], [0, 180, 220], matr);				graphics.drawRect(0, 0, barWidth * left, barHeight);				graphics.endFill();								// right:				graphics.beginGradientFill(GradientType.LINEAR, [0x9ACD32, 0xFF4500, 0xCD0000], [1.0, 1.0, 1.0], [0, 180, 220], matr);				graphics.drawRect(0, barHeight + barSeperator, barWidth * right, barHeight);				graphics.endFill();			}						previousVolume = volume;		}	}}
/*Copyright (c) 2008 Christopher Martin-Sperry (audiofx.org@gmail.com)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package com.moorscode.sound.mp3 {	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.media.Sound;	import flash.net.FileReference;	import flash.system.Capabilities;	import flash.system.LoaderContext;	import flash.utils.ByteArray;	import flash.utils.Endian;	/**	 * Class for loading MP3 files from a FileReference	 * @author spender	 * @see flash.net.FileReference	 */	public class MP3FileReferenceLoader extends EventDispatcher {		private var _mp3Parser		:MP3Parser;		private var _swfBytesLoader	:Loader;		private var _mp3Sound		:Sound;		private var _mp3ID3			:ID3;		private var _sampleRate		:Number;		/**		 * Constructs an new MP3FileReferenceLoader instance		 *		 */		public function MP3FileReferenceLoader() {			_mp3Parser = new MP3Parser();			_mp3Parser.addEventListener(Event.COMPLETE, parserCompleteHandler, false, 0, true);			_mp3Parser.addEventListener(ProgressEvent.PROGRESS, updateProgress, false, 0, true);		}		/**		 * Once a FileReference instance has been obtained, and the user has browsed to a file, call getSound to start loading the MP3 data.		 * When the data is ready, an <code>Event.COMPLETE</code> event is emitted.		 * @param fr A reference to a local file.		 * @see MP3SoundEvent		 */		public function loadFromReference(fileRef:FileReference):void {			_mp3Parser.reset();			_mp3Parser.loadFileRef(fileRef);		}				private function updateProgress(event:ProgressEvent):void {			dispatchEvent(event);		}				private function parserCompleteHandler(ev:Event):void {			generateSound();			_sampleRate = _mp3Parser.samplerate;		}				public function get samplerate():Number {			return _sampleRate;		}				private function generateSound():Boolean {			var swfBytes:ByteArray = new ByteArray();			swfBytes.endian = Endian.LITTLE_ENDIAN;						var i:int;			for (i = 0; i < SoundClassSwfByteCode.soundClassSwfBytes1.length; ++i) {				swfBytes.writeByte(SoundClassSwfByteCode.soundClassSwfBytes1[i]);			}			var swfSizePosition:uint=swfBytes.position;			swfBytes.writeInt(0);//swf size will go here			for (i=0; i<SoundClassSwfByteCode.soundClassSwfBytes2.length; ++i) {				swfBytes.writeByte(SoundClassSwfByteCode.soundClassSwfBytes2[i]);			}			var audioSizePosition:uint=swfBytes.position;			swfBytes.writeInt(0);//audiodatasize+7 to go here			swfBytes.writeByte(1);			swfBytes.writeByte(0);			_mp3Parser.writeSwfFormatByte(swfBytes);			var sampleSizePosition:uint=swfBytes.position;			swfBytes.writeInt(0);//number of samples goes here			swfBytes.writeByte(0);//seeksamples			swfBytes.writeByte(0);			var frameCount:uint = 0;			var byteCount:uint = 0;//this includes the seeksamples written earlier			while (true) {				var seg:ByteArraySegment=_mp3Parser.getNextFrame();				if (seg==null) {					break;				}				swfBytes.writeBytes(seg.byteArray,seg.start,seg.length);				byteCount+=seg.length;				frameCount++;			}			if (byteCount==0) {				return false;			}			byteCount+=2;			var currentPos:uint=swfBytes.position;			swfBytes.position = audioSizePosition;			swfBytes.writeInt(byteCount + 7);			swfBytes.position = sampleSizePosition;			swfBytes.writeInt(frameCount * 1152);			swfBytes.position = currentPos;			for(i=0; i<SoundClassSwfByteCode.soundClassSwfBytes3.length; ++i) {				swfBytes.writeByte(SoundClassSwfByteCode.soundClassSwfBytes3[i]);			}			swfBytes.position=swfSizePosition;			swfBytes.writeInt(swfBytes.length);			swfBytes.position=0;			if(_swfBytesLoader) {				_swfBytesLoader.unloadAndStop(true);				_swfBytesLoader = null;			}			_swfBytesLoader = new Loader();			_swfBytesLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, swfCreated, false, 0, true);			var loaderContext:LoaderContext = new LoaderContext();						//allows Air applications to load binary data			if (Capabilities.playerType=="Desktop") {				loaderContext["allowLoadBytesCodeExecution"]=true;			}						_swfBytesLoader.loadBytes(swfBytes, loaderContext);			return true;		}		private function swfCreated(ev:Event):void {			_swfBytesLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, swfCreated);						var soundClass:Class = Class(_swfBytesLoader.contentLoaderInfo.applicationDomain.getDefinition("SoundClass"));			_mp3Sound = new soundClass();			if(_mp3Parser.id3 != null) {				_mp3ID3 = _mp3Parser.id3;			}			dispatchEvent(new Event(Event.COMPLETE));		}		public function get sound():Sound {			return _mp3Sound;		}				public function get mp3ID3():ID3 {			return _mp3ID3;		}	}}
package {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;		import flash.geom.Point;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.describeType;	import flash.utils.getQualifiedClassName;	import flash.utils.getTimer;	import flash.ui.Keyboard;		import flash.external.ExternalInterface;	import flash.display.StageAlign;	import flash.display.StageScaleMode;		import fl.data.DataProvider;	import fl.events.ListEvent;	import fl.controls.DataGrid;	import fl.controls.dataGridClasses.DataGridColumn;	import fl.controls.ComboBox;	import fl.controls.listClasses.CellRenderer;	import fl.controls.ScrollBarDirection;		import com.moorscode.net.NetEvent;	import com.moorscode.net.NetController;		import com.moorscode.interfaces.ChatListRenderer;		public class chat extends Sprite {		private var initialized:Boolean = false;				private var chatUsers:Array = new Array();				private var myName:String = '';		private var myId:int = 0;				private var lastColorLine:String = '';				private var queueScrollDown:Boolean = false;				private var listPosition:uint = 0;				private const NORMAL_TEXT:uint = 0;		private const STATUS_TEXT:uint = 1;		private const ERROR_TEXT:uint = 2;		private const JOIN_TEXT:uint = 3;		private const PART_TEXT:uint = 4;		private const NO_TIMESTAMP:uint = 5;		private const ACHIEVEMENT_TEXT:uint = 6;				private var showUserIndex = -1;				public function chat():void {			// set custom renderer for tank icons:			chatList.setStyle("cellRenderer", ChatListRenderer);			chatList.addEventListener(ListEvent.ITEM_ROLL_OVER, showUsername);			chatList.addEventListener(MouseEvent.MOUSE_OUT, hideUsername);						userPopup.addEventListener(MouseEvent.MOUSE_MOVE, hideUsername);						chatList.addEventListener(MouseEvent.MOUSE_MOVE, positionUserPopup);													btnSend.addEventListener(MouseEvent.CLICK, sendText);									// fonts			var myFormat:TextFormat = new TextFormat();				myFormat.font = "Monaco";				myFormat.size = 9;				myFormat.color = 0x00000;						chatText.textField.antiAliasType = "advanced";						chatText.setStyle("textFormat", myFormat);			chatText.setStyle("embedFonts", true);			chatText.enabled = true;						chatInput.textField.antiAliasType = "advanced";						chatInput.setStyle("textFormat", myFormat);			chatInput.setStyle("embedFonts", true);						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						// toggleList.gotoAndStop(1);						// preloader			addEventListener(Event.ENTER_FRAME, _frame);		}				private function positionUserPopup(event:MouseEvent):void {			userPopup.x = Math.min( Math.max((userPopup.width / 2.0) + 5, event.stageX), stage.stageWidth - (userPopup.width / 2.0) - 5 );			userPopup.visible = (showUserIndex > -1);						if(userPopup.visible) {				var newPos:Number = userPopup.globalToLocal(new Point(event.stageX, event.stageY)).x - (userPopup.pointer.width / 2.0);				userPopup.pointer.x = Math.min( Math.max(-60,newPos), 38 );			}		}				private function showUsername(event:ListEvent):void {			var user = chatList.getItemAt(event.index);			var username:String = getChatUsername(user.data);						if(username != "") {				showUserIndex = event.index;								userPopup.username.text = username;				userPopup.visible = true;			}		}				private function hideUsername(event:MouseEvent):void {			showUserIndex = -1;						positionUserPopup(event);		}				// INITIALIZE - Wait for movieclip to be loaded completly		private function _frame(event:Event):void {			if(stage.loaderInfo.bytesTotal == stage.loaderInfo.bytesLoaded && !initialized) {				initialized = true;				initialize();				stage.addEventListener(Event.RESIZE, _resizeFields);				removeEventListener(event.type, arguments.callee);			}		}				// INITIALIZE - After Preloading: Load Config		private function initialize():void {			_resizeFields();						//toggleList.addEventListener(MouseEvent.CLICK, toggleUserList);						ExternalInterface.addCallback("pushData", handleJSData);						addEventListener(Event.ENTER_FRAME, scrollDown);						var url:URLLoader = new URLLoader();				url.addEventListener(Event.COMPLETE, _parseServerXML);				url.load(new URLRequest("assets/servers.xml"));		}				private function handleJSData(data:String):Boolean {			if(!NetController.connected) return false;						if(data.substr(0, 3) == "ach") {				var achievementId:int = int(data.replace("ach", 0));								// handle achievements				var xml:XML = <a>								<w>achievement</w>								<i>{achievementId}</i>							  </a>;								NetController.send(xml);			}						if(data == 'f7c1d52751cb33c51796ce57d572c022') {				var xml:XML = <a>								<w>achieved</w>								<i>1</i>							  </a>;								NetController.send(xml);			}						return true;		}				/*		private function toggleUserList(event:MouseEvent):void {			listPosition = (listPosition == 0)?2:0;			_resizeFields();		}		*/				// CONFIG - Read the data from the Config XML		private function _parseServerXML(event:Event):void {			var xml:XML = XML(event.target.data);			setListeners();			NetController.connect(String(xml.chatserver.server), int(xml.chatserver.port));						addToChatWindow('Bezig met verbinden.', STATUS_TEXT);		}				// !! Handle Data recieved from the Server !! //		private function parseData(event:NetEvent):void {			var xmlData:XML = event.xml;			var what:String;			var username:String;						if(xmlData.t == "chat") {				switch(String(xmlData.w)) {					case "identified":						if(int(xmlData.success) == 0) {							addToChatWindow("Identificeren mislukt.", ERROR_TEXT);							addToChatWindow("Log in om deel te nemen aan de chat!");						} else {							myName = String(xmlData.n);							myId = int(xmlData.i);							enableChat();														addToChatWindow("Geïdentificeerd!", JOIN_TEXT);						}						break;										case "list":						// recieved the complete Chat List												// reset current lists, so only fresh data is used						chatUsers = new Array();						chatList.removeAll();												for each(var user:XML in xmlData.us.u) {							addUserToList(user.i, user.n);						}												break;										case "part":						// somebody left the chat												// show notification						username = getChatUsername(uint(xmlData.i));						addToChatWindow(username + ' heeft zich afgemeld.', PART_TEXT);												// clean up the ChatUsernames array						removeChatUser(uint(xmlData.i));						break;										case "join":						// somebody joined												// show notification						addToChatWindow(xmlData.n + ' heeft zich aangemeld.', JOIN_TEXT);												// add to the user lists						addUserToList(uint(xmlData.i), xmlData.n);						break;										case "say":						// somebody said something						username = getChatUsername(uint(xmlData.i));						addToChatWindow(username + ': ' + xmlData.text);						break;										case "achievement":						username = getChatUsername(uint(xmlData.i));						addToChatWindow(username + ' heeft de "' + xmlData.title + '" prestatie gehaald op ' + xmlData.when + '!', ACHIEVEMENT_TEXT);						break;				}			}		}				private function addUserToList(id:uint, name:String):void {						var found:Boolean = false;			for each(var user:Array in chatUsers) {				if(uint(user[0]) == id) {					found = true;				}			}						if(!found) {				chatUsers.push(new Array(id, name));				chatList.addItem({label:"",data:id,source:"assets/php/image.php?uid="+id});			}		}				// CHAT - enable chat interface		private function enableChat():void {						chatUsers = new Array();			chatList.removeAll();						btnSend.enabled = true;			chatList.enabled = true;			chatText.enabled = true;			chatInput.enabled = true;			chatInput.addEventListener(KeyboardEvent.KEY_UP, sendText);						chatInput.setFocus();						requestChatList();		}				// CHAT - disable chat interface		private function disableChat() {			chatList.removeAll();						btnSend.enabled = false;			chatList.enabled = false;			chatInput.enabled = false;			chatInput.text = '';			chatInput.removeEventListener(KeyboardEvent.KEY_UP, sendText);		}				// NET - request chat-users update		private function requestChatList():void {			var xml:XML = <a>							<t>chat</t>							<w>list</w>						  </a>;						NetController.send(xml);		}				// INTERFACE - handle chat text send request		private function sendText(event:*):void {			var doSend:Boolean = true;						if(event.type == KeyboardEvent.KEY_UP) {				doSend = (event.keyCode == Keyboard.ENTER);			}						if(doSend) {				var text:String = chatInput.text;				chatInput.text = '';								if(text != '') {					sendToChat(text);				}			}		}				// NET - send chat text to server		private function sendToChat(text:String):void {			var xml:XML = <a>							<t>chat</t>							<w>say</w>							<text>{text}</text>						  </a>;						NetController.send(xml);			chatInput.setFocus();		}				// GFX - add text to Chat Field		private function addToChatWindow(text:String, type:uint = NORMAL_TEXT):void {			if(!chatText.enabled) return;						var color:String;			switch(type) {				case 1:					color = "000066";					break;				case 2:					color = "990000";					break;				case 3:					color = "006600";					break;				case 4:					color = "606060";					break;				case 6:					color = "C17C39";					break;				default:					color =	"000000";					break;			}						var prefix:String = '';						if(type == 0) {				var now:Date = new Date();				// prefix = '[' + leadingZero(now.hours) + ':' + leadingZero(now.minutes) + '] ';				color = (lastColorLine == '000000')?'4a5a6d':'000000';			} else {				prefix = '~ ';			}						var line:String = '<font color="#' + color + '">';				line += prefix + text;				line += '</font>';						lastColorLine = color;						chatText.html = true;			chatText.htmlText += line;			chatText.verticalScrollPosition = chatText.maxVerticalScrollPosition;						queueScrollDown = true;		}				// MISC - UserId => Name		private function getChatUsername(id:uint):String {			for each(var user:Array in chatUsers) {				if(uint(user[0]) == id) {					return String(user[1]);				}			}			return "Onbekende gebruiker";		}				// MISC - clean up chatusers list		private function removeChatUser(id:uint):void {			// remove ChatList item for the leaving player...			for(var i:uint = 0; i < chatList.length; i++) {				var item:Object = chatList.getItemAt(i);				if(item.data == id) {					chatList.removeItemAt(i);				}			}						for(var i:uint = 0; i < chatUsers.length; i++) {				if(uint(chatUsers[i][0]) == id) {					chatUsers.splice(i, 1);					return;				}			}		}				// NET - Handle events from the NetController:		private function netEvents(event:NetEvent):void {			switch(event.type) {				case NetEvent.CONNECT:					// request user_id					var phpSession:String = JavaScript("getVariable", "PHPSESSION");						phpSession = (phpSession == null)?"debug":phpSession;										NetController.push("PHPSESSION=" + phpSession);										addToChatWindow('Bezig met identificeren.', STATUS_TEXT);										break;									case NetEvent.DISCONNECT:					chatList.removeAll();										myName = '';					myId = 0;										disableChat();					addToChatWindow('Serververbinding gesloten.', ERROR_TEXT);					break;									case NetEvent.ERROR:					disableChat();					addToChatWindow('Er kan geen verbinding met de server gemaakt worden.', ERROR_TEXT);					break;			}		}				// MISC - Leading Zero... should be in flash though?!		private function leadingZero(number:*):String {			return ((number < 10)?"0":"") + number;		}				private function _resizeFields(event:Event = null):void {			stage.focus = stage;						var width = stage.stageWidth;			var height = stage.stageHeight;						/* Firefox / IE Zoom functions actually resize the flash;			 * - Handle exact sizes.			 * ScaleMode: EXACT_FIT ?			 */						btnSend.width = (width < 300)?60:100;						chatList.width = width - 21;			chatText.width = width - 20;						chatText.width = width - 20;			chatText.y = chatList.y + chatList.height;						//chatInput.y = height - chatInput.height - 10;			chatInput.width = width - btnSend.width - 30;						btnSend.x = chatInput.width + 20;			btnSend.y = chatInput.y - 3;						queueScrollDown = true;		}				private function scrollDown(event:Event = null):void {			if(queueScrollDown) {				chatText.verticalScrollPosition = chatText.maxVerticalScrollPosition;			}						queueScrollDown = false;		}				// NET - Set listeners for the NET Events		private function setListeners():void {			NetController.addEventListener(NetEvent.CONNECT, netEvents);			NetController.addEventListener(NetEvent.ERROR, netEvents);			NetController.addEventListener(NetEvent.DATA, parseData);			NetController.addEventListener(NetEvent.DISCONNECT, netEvents);		}				private function JavaScript(functionName:String, arguments:String = ""):String {			if(ExternalInterface.available) {				return ExternalInterface.call(functionName, arguments);			}						return null;		}	}}
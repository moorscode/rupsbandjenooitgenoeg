package com.moorscode.library {		import flash.display.Loader;		import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.IOErrorEvent;		import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;		import flash.system.LoaderContext;	import flash.system.ApplicationDomain;		public class LibraryLoader {		private static var loadLibraries:Array = new Array("levels", "menus", "hud");		private static var loadedLibraries:Array = new Array();				private static var libraryPath:String = "";		private static var libraryName:String = ""; // current library loading.				private static var dispatcher:EventDispatcher = new EventDispatcher();				public function LibraryLoader():void {		}				public static function setPath(path:String):void {			libraryPath = path;		}				public static function load():void {			var req:URLRequest = new URLRequest("assets/php/config.php");						// "gfx_" + gfxLibrary;			var url:URLLoader = new URLLoader();				url.addEventListener(Event.COMPLETE, parseSettings);				url.addEventListener(IOErrorEvent.IO_ERROR, parseSettings);				url.load(req);		}				private static function parseSettings(event:*):void {			if(event.type == Event.COMPLETE) {				var xml:XML = XML(event.target.data);				if(xml.graphics.length() > 0) {					loadLibraries.push("gfx_" + xml.graphics);				} else {					loadLibraries.push("gfx_default");				}			}						if(event.type == IOErrorEvent.IO_ERROR) {				loadLibraries.push("gfx_default");			}						loadNextLibrary();		}				private static function loadNextLibrary():void {			if(loadedLibraries.length == loadLibraries.length) {				dispatcher.dispatchEvent(new Event(Event.COMPLETE));				return;			}						libraryName = loadLibraries[loadedLibraries.length];						// force reload of swf by making it a POST request			var request = new URLRequest("assets/"+libraryPath+"/"+libraryName+".swf");				request.method = URLRequestMethod.POST;				request.data = true;						// laad library			var library = new Loader();				library.contentLoaderInfo.addEventListener(Event.INIT, afterLoading, false, 0, true);				library.load(request, new LoaderContext(false, ApplicationDomain.currentDomain));		}				private static function afterLoading(event:Event):void {			loadedLibraries.push(libraryName);			loadNextLibrary();		}				public static function addEventListener(type:String, listener:Function):void {			dispatcher.addEventListener(type, listener, false, 0, true);		}				public static function removeEventListener(type:String, listener:Function):void {			dispatcher.removeEventListener(type, listener);		}	}}
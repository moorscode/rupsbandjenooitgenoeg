package com.moorscode.sound {	import flash.media.Sound;	import flash.media.SoundTransform;	import flash.media.SoundChannel;	import flash.media.SoundMixer;		import flash.events.IOErrorEvent;	import flash.events.Event;		import flash.net.URLLoader;	import flash.net.URLRequest;		import flash.external.ExternalInterface;		public class Audio {		public static var path:String = "";				private static var __globalVolume:Number = 1.0;		private static var __musicVolume:Number = 1.0;		private static var __fxVolume:Number = 1.0;				private static var __returnGlobalVolume:Number = 0.0;				private static var __musicChannels:Array = new Array();		private static var __effectChannels:Array = new Array();				private static var __initialized:Boolean = false;				public function Audio():void {		}				public static function initialize():void {			if(__initialized) return;			__initialized = true;						var url:URLLoader = new URLLoader();				url.addEventListener(Event.COMPLETE, applySettings, false, 0, true);				url.load(new URLRequest("assets/php/config.php"));		}				private static function applySettings(event:Event):void {			event.target.removeEventListener(event.type, arguments.callee);			var xml:XML = XML(event.target.data);						if(xml != '') {								__globalVolume = Number(xml.volume.global);				if(__musicVolume > 0.0) __musicVolume = Number(xml.volume.music);				__fxVolume 	   = Number(xml.volume.fx);								SoundMixer.soundTransform = new SoundTransform(__globalVolume, 0);								__updateMusicChannels();				__updateSoundChannels();			}		}				public static function get musicVolume():Number {			return __musicVolume;		}				public static function set musicVolume(value:Number):void {			__musicVolume = value;			__updateMusicChannels();		}				public static function get fxVolume():Number {			return __fxVolume;		}				public static function set fxVolume(value:Number):void {			__fxVolume = value;			__updateSoundChannels();		}				private static function __updateMusicChannels():void {			for(var musicIndex in __musicChannels) {				volume(__musicChannels[musicIndex], __musicChannels[musicIndex].soundTransform.volume);			}		}				private static function __updateSoundChannels():void {			for(var fxIndex in __effectChannels) {				volume(__effectChannels[fxIndex], __effectChannels[fxIndex].soundTransform.volume);			}		}						public static function playMusic(filename:String, loop:Boolean = true, volume:Number = 1.0):SoundChannel {			if(!__initialized) initialize();			if(__globalVolume == 0.0 || __musicVolume == 0.0) return new SoundChannel();						volume *= __musicVolume;						// if the sound volume is too low, just don't play it! - Data preservation.			if(Math.floor(volume * 10) == 0) return new SoundChannel();						var sound = new Sound();			sound.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);			sound.load(new URLRequest("assets/" + path + filename));						var channel:SoundChannel = sound.play(0, (loop)?int.MAX_VALUE:1, new SoundTransform(volume));			channel.addEventListener(Event.SOUND_COMPLETE, __removeMe);						var channelIndex:uint = __musicChannels.push(channel) - 1;			return __musicChannels[channelIndex];		}				public static function playSound(filename:String, volume:Number = 1.0, panning:Number = 0.0):SoundChannel {			if(!__initialized) initialize();			if(__globalVolume == 0.0 || __fxVolume == 0.0) return new SoundChannel();						volume *= __fxVolume;						// if the sound volume is too low, just don't play it! - Data preservation.			if(Math.floor(volume * 10) == 0) return new SoundChannel();						var sound = new Sound();			sound.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);			sound.load(new URLRequest("assets/" + path + filename));						var channel:SoundChannel = sound.play(0, 1, new SoundTransform(volume, panning));			channel.addEventListener(Event.SOUND_COMPLETE, __removeMe);			var channelIndex:uint = __effectChannels.push(channel) - 1;			return __effectChannels[channelIndex];		}				public static function forcePlaySound(filename:String, volume:Number = 1.0):SoundChannel {			var __fxVolumeTmp:Number = __fxVolume;				__returnGlobalVolume = __globalVolume;						SoundMixer.soundTransform = new SoundTransform(1.0, 0);						__fxVolume = 1.0;			var channel:SoundChannel = playSound(filename, volume);			channel.addEventListener(Event.SOUND_COMPLETE, __restoreVolume);			__fxVolume = __fxVolumeTmp;						return channel;		}				private static function __restoreVolume(event:Event):void {			__globalVolume = __returnGlobalVolume;			SoundMixer.soundTransform = new SoundTransform(__globalVolume, 0);		}				public static function volume(target:SoundChannel, volume:Number = 1.0):void {			adjust(target, volume, target.soundTransform.pan);		}				public static function panning(target:SoundChannel, panning:Number = 0.0):void {			target.soundTransform = new SoundTransform(target.soundTransform.volume, panning);		}				public static function adjust(target:SoundChannel, volume:Number = 1.0, panning:Number = 0.0):void {			if(__effectChannels.indexOf(target) > -1) {				volume *= __fxVolume;			}						if(__musicChannels.indexOf(target) > -1) {				volume *= __musicVolume;			}						if(target) {				target.soundTransform = new SoundTransform(volume, panning);			}		}				private static function __removeMe(event:Event):void {			var musicIndex:uint = __musicChannels.indexOf(event.target);			var fxIndex:uint = __effectChannels.indexOf(event.target);						if(musicIndex > -1) {				__musicChannels.splice(musicIndex, 1);			} else if(fxIndex > -1 ) {				__effectChannels.splice(fxIndex, 1);			}		}				public static function errorHandler(event:IOErrorEvent):void {			trace("Sound couldn't be loaded!");		}	}}
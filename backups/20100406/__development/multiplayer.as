package {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;		import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.SharedObject;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.describeType;	import flash.utils.getQualifiedClassName;	import flash.utils.getTimer;	import flash.ui.Keyboard;		import flash.external.ExternalInterface;	import flash.display.StageAlign;	import flash.display.StageScaleMode;		import fl.data.DataProvider;	import fl.events.ListEvent;	import fl.controls.DataGrid;	import fl.controls.dataGridClasses.DataGridColumn;	import fl.controls.ComboBox;		import com.moorscode.net.NetEvent;	import com.moorscode.net.NetController;		import com.moorscode.sound.Audio;		import com.moorscode.game.GameEvent;		import rupsbandjenooitgenoeg;		public class multiplayer extends Sprite {		private var myName:String = '';		private var myId:uint = 0;				private var gameId:uint = 0;		private var gameName:String = '';		private var gameOwner:uint = 0;		private var gameWaitForPlayers:uint = 0;				private var iQueue:interfaceQueue = new interfaceQueue();		private var iGame:interfaceGame = new interfaceGame();				private var loadingScreen:loading = new loading();				private var passwordWindow:wndEnterPassword = new wndEnterPassword(); // enter pass to join game that is protected.				private var game:rupsbandjenooitgenoeg;				private var dpGameList:DataProvider = new DataProvider();		private var dpPlayerList:DataProvider = new DataProvider();				private var selectedGameId:String = "";		private var selectedGamePP:int = 0;				public function multiplayer():void {			with(iGame) {				playerList.dataProvider = dpPlayerList;				btnLeaveGame.addEventListener(MouseEvent.CLICK, leaveGame);				btnStartGame.addEventListener(MouseEvent.CLICK, startGame);				soundOnFull.addEventListener(Event.CHANGE, saveSoundSetting);			}						with(iQueue) {				btnCreateGame.addEventListener(MouseEvent.CLICK, showCreateGame);				btnJoinGame.addEventListener(MouseEvent.CLICK, joinGame);				btnRefreshGameList.addEventListener(MouseEvent.CLICK, refreshGameList);			}						with(passwordWindow) {				btnOK.addEventListener(MouseEvent.CLICK, joinGame);				btnCancel.addEventListener(MouseEvent.CLICK, cancelPassword);			}										var gameList = iQueue.gameList;				gameList.headerHeight = 20;				gameList.rowHeight = 20;				gameList.sortableColumns = true;				gameList.dataProvider = dpGameList;				gameList.addEventListener(ListEvent.ITEM_CLICK, selectGame);				gameList.addEventListener(ListEvent.ITEM_DOUBLE_CLICK, selectGame);						var passColumn:DataGridColumn = gameList.addColumn("pass");				passColumn.width = 20;				passColumn.headerText = '';							gameList.addColumn("naam");						var playerColumn:DataGridColumn = gameList.addColumn("spelers");				playerColumn.width = 63;							disableQueue();						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						var so:SharedObject = SharedObject.getLocal("settings");			iGame.soundOnFull.selected = so.data.soundOnFull;						addEventListener(Event.ENTER_FRAME, _frame);		}				private function saveSoundSetting(event:Event):void {			var so:SharedObject = SharedObject.getLocal("settings");			so.data.soundOnFull = event.target.selected;			so.flush(); // writes changes to disk		}				// INITIALIZE - Wait for movieclip to be loaded completly		private function _frame(event:Event):void {			if(stage.loaderInfo.bytesTotal == stage.loaderInfo.bytesLoaded) {				removeEventListener(event.type, arguments.callee);				initialize();			}		}				// INITIALIZE - After Preloading: Load Config		private function initialize():void {			_resizeFields();			stage.addEventListener(Event.RESIZE, _resizeFields);						ExternalInterface.addCallback("playSound", JSSoundRequest);						JavaScript("flashLoaded", "rupsbandjenooitgenoeg");						var url:URLLoader = new URLLoader();			url.addEventListener(Event.COMPLETE, _parseServerXML);			url.load(new URLRequest("assets/servers.xml"));		}				function JSSoundRequest(sound:String):void {			Audio.forcePlaySound("rupsbandjenooitgenoeg/"+sound+".mp3");		}				// CONFIG - Read the data from the Config XML		private function _parseServerXML(event:Event):void {			var xml:XML = XML(event.target.data);			setListeners();			NetController.connect(String(xml.gameserver.server), int(xml.gameserver.port));						addChild(iQueue);			addChild(iGame);						iGame.visible = false;		}				// GAME INTERFACE - handle gamelist mouse functions		private function selectGame(event:ListEvent):void {			if(gameId == 0) {				var selectedGame:Object = iQueue.gameList.dataProvider.getItemAt(uint(event.rowIndex));								selectedGameId = "" + int(selectedGame.id);				selectedGamePP = int(selectedGame.pp);								if(event.type == ListEvent.ITEM_DOUBLE_CLICK) {					joinGame();				} else {					iQueue.btnJoinGame.enabled = true;					requestPlayerList();				}			}		}				// GFX - show game creation window		private function showCreateGame(event:MouseEvent):void {			iQueue.btnCreateGame.enabled = false;						JavaScript("gameAsMain");						var createGame:wndCreateGame = new wndCreateGame();						createGame.x = stage.stageWidth / 2.0;			createGame.y = stage.stageHeight / 2.0;			createGame.name = "createGame";						createGame.txtGameName.addEventListener(KeyboardEvent.KEY_UP, doCreateGame);			createGame.btnCreateGame.addEventListener(MouseEvent.CLICK, doCreateGame);			createGame.btnCancel.addEventListener(MouseEvent.CLICK, doCreateGame);						createGame.txtGameName.text = myName + "'s Game";			createGame.btnCreateGame.setFocus();						addChild(createGame);		}				// INTERFACE - handle create game buttons		private function doCreateGame(event:*):void {			if(event.type == KeyboardEvent.KEY_UP) {				if(event.keyCode != Keyboard.ENTER) {					return;				}			}						var window = event.target.parent;			if(getQualifiedClassName(window) != "wndCreateGame") {				window = window.parent;			}						var createGame:wndCreateGame = wndCreateGame(window);						if(event.target != createGame.btnCancel) {				if(createGame.txtGameName.text == '') {					showMessageWindow("Voer een game naam in...");					return;				}								var list:ComboBox = ComboBox(createGame.listMaxPlayers);								gameName = String(createGame.txtGameName.text);				gameWaitForPlayers = uint(list.getItemAt(list.selectedIndex).label);								var xml:XML = <a>								<t>global</t>								<w>create</w>								<n>{gameName}</n>								<m>{gameWaitForPlayers}</m>								<p>{createGame.txtGamePass.text}</p>							  </a>;								NetController.send(xml);			}						createGame.txtGameName.text = '';						iQueue.btnCreateGame.enabled = (event.target == createGame.btnCancel);						removeChild(createGame);						createGame.txtGameName.removeEventListener(KeyboardEvent.KEY_UP, doCreateGame);			createGame.btnCreateGame.removeEventListener(MouseEvent.CLICK, doCreateGame);			createGame.btnCancel.removeEventListener(MouseEvent.CLICK, doCreateGame);			createGame = null;						JavaScript("chatAsMain");		}				private function enableQueue():void {			with(iQueue) {				gameList.enabled 			= true;				btnRefreshGameList.enabled 	= true;				btnCreateGame.enabled 		= true;			}						with(iGame) {				playerList.enabled 			= true;			}		}				private function disableQueue():void {			// clear dataprovider for gameList			// clear dataprovider for playerlist			with(iQueue) {				gameList.enabled 			= false;				btnRefreshGameList.enabled 	= false;				btnCreateGame.enabled 		= false;				btnJoinGame.enabled 		= false;			}						with(iGame) {				playerList.enabled 			= false;				btnLeaveGame.enabled 		= false;				btnStartGame.enabled 		= false;			}						dpGameList.removeAll();			dpPlayerList.removeAll();		}				// GAME INTERFACE - handle game interface controls		private function gameControls():void {			if(myId == 0) {				disableQueue();				return;			}						if(gameId == 0) {				if(iQueue.visible == false) {					iGame.visible = false;					iQueue.visible = true;				}								with(iQueue) {					btnCreateGame.enabled 	= true;				}								with(iGame) {					btnLeaveGame.enabled 	= false;					btnStartGame.enabled 	= false;				}								return;			}						if(gameOwner == myId) {				with(iQueue) {					btnCreateGame.enabled 	= false;				}								with(iGame) {					btnStartGame.enabled 	= (dpPlayerList.length == gameWaitForPlayers);					btnLeaveGame.enabled 	= true;				}			} else {				with(iGame) {					btnStartGame.enabled 	= false;					btnLeaveGame.enabled 	= true;				}			}		}				private function getRankName(rank:uint):String {			var ranks:Array = new Array('PVT', 'KRP', 'SGT', 'MAJ', 'ADJ', 'LUI', 'KPT', 'KOL', 'GNM', 'LGN', 'GEN');			return ranks[rank];		}				// !! Handle Data recieved from the Server !! //		private function parseData(event:NetEvent):void {			var xmlData:XML = event.xml;						if(xmlData.t == "passthru") {				if(xmlData.w == "tellChat") {					JavaScript("tellChat", xmlData.data);					return;				}			}						if(xmlData.t == "queue") {				switch(String(xmlData.w)) {					case "identified":						if(int(xmlData.success) == 0) {							// client is not identified...							// something went wrong - do nothing / show error?						} else {							myName = String(xmlData.n);							myId = int(xmlData.i);							enableQueue();						}												break;											case "list":						dpGameList.removeAll();						iQueue.btnJoinGame.enabled = false;						//selectedGameId = "";												var idStillExists:Boolean = false;												for each(var listGame:XML in xmlData.gs.g) {							// pp = password protected							var passField:String = (listGame.pp == 1)?'*':'';							dpGameList.addItem({id:listGame.i, pp:listGame.pp, naam:listGame.n, spelers:String(listGame.pc) + "/" + String(listGame.mp), pass:passField});							if(listGame.i == selectedGameId) {								idStillExists = true;							}						}												if(idStillExists) {							requestPlayerList();						}												break;											case "playerlist":						var maxPlayers = uint(xmlData.mp);						var currentPlayers:uint = 0;												gameWaitForPlayers = maxPlayers;												// refresh list						dpPlayerList.removeAll();												for each(var player:XML in xmlData.ps.p) {							dpPlayerList.addItem({label:getRankName(player.r)+" " + player.n, data:player.i});							currentPlayers++;						}												// resort list						dpPlayerList.sortOn("label");												iGame.lblPlayerCount.text = currentPlayers + ' / ' + maxPlayers + ' spelers';												if(currentPlayers == maxPlayers && iGame.soundOnFull.selected == true) {							Audio.forcePlaySound("rupsbandjenooitgenoeg/gameFull.mp3");						}												break;											case "owner":						if(int(xmlData.g) == gameId) {							gameOwner = uint(xmlData.i);						}												break;											case "created":						gameId = uint(xmlData.i);						gameOwner = myId;												// hide queue, show game						iQueue.visible = false;						iGame.visible = true;												iGame.lblGameName.text = gameName;												break;											case "joined":						gameId = uint(xmlData.gi);						gameName = String(xmlData.gn);												if(gameId == 0) {							showMessageWindow(String(xmlData.r));						} else {							iQueue.visible = false;							iGame.visible = true;														iGame.lblGameName.text = gameName;						}												break;											case "startgame":						/* !! START THE GAME !! */						var players:Array = new Array();						for(var p:int = 0; p < dpPlayerList.length; p++) {							players.push(new Array(dpPlayerList.getItemAt(p).data, dpPlayerList.getItemAt(p).label));						}												dpPlayerList.removeAll();												if(contains(iQueue)) {							removeChild(iQueue);						}												if(contains(iGame)) {							removeChild(iGame);						}												JavaScript("enteringGame");												addChild(loadingScreen);												game = new rupsbandjenooitgenoeg(players, myId, (myId == gameOwner));						game.addEventListener(GameEvent.LOADED, gameLoaded);						game.addEventListener(Event.CLOSE, gameClosed);						addChild(game);												break;				}								gameControls();			}		}				// GFX - remove loading text (when the game is ready)		private function gameLoaded(event:Event = null):void {			game.removeEventListener(event.type, arguments.callee);			// NetController.removeEventListener(NetEvent.DATA, parseData);						// remove loading screen:			removeChild(loadingScreen);		}				// MISC - remove the game		private function gameClosed(event:Event):void {			// NetController.addEventListener(NetEvent.DATA, parseData);			game.removeEventListener(event.type, arguments.callee);						removeChild(game);			game = null;						_resizeFields();						gameId = 0;			gameOwner = 0;			gameWaitForPlayers = 0;						addChild(iQueue);			addChild(iGame);						enableQueue();			gameControls();						iGame.visible = false;			iQueue.visible = true;						refreshGameList();						JavaScript("leavingGame");			JavaScript("chatAsMain");		}				// NET - Handle events from the NetController:		private function netEvents(event:NetEvent):void {			switch(event.type) {				case NetEvent.CONNECT:					// request user_id					var phpSession:String = JavaScript("getVariable", "PHPSESSION");						phpSession = (phpSession == null)?"debug":phpSession;										NetController.push("PHPSESSION=" + phpSession);					break;				case NetEvent.DISCONNECT:				case NetEvent.ERROR:					myName = "";					myId = 0;										selectedGameId = "";					selectedGamePP = 0;										gameId = 0;					gameOwner = 0;					gameWaitForPlayers = 0;										disableQueue();					// disable all controls, clear list					break;			}		}				// GAME INTERFACE - playerlist refresh		private function requestPlayerList():void {			if(selectedGameId == "") return;						var xml:XML = <a>							<t>queue</t>							<w>playerlist</w>							<g>{selectedGameId}</g>						  </a>;					// send XML to join game..			NetController.send(xml);		}				// NET - request game list		private function refreshGameList(event:MouseEvent = null):void {			var xml:XML = <a>							<t>queue</t>							<w>list</w>						  </a>;						NetController.send(xml);		}				// NET - request game start		private function startGame(event:MouseEvent):void {			var xml:XML = <a>							<t>queue</t>							<w>start</w>						  </a>;						NetController.send(xml);		}				private function cancelPassword(event:MouseEvent = null):void {			if(contains(passwordWindow)) {				removeChild(passwordWindow);			}		}				// NET - request join game queue		private function joinGame(event:MouseEvent = null):void {			if(selectedGameId == "") return;						var gamePassword:String = "";						if(selectedGamePP == 1) {				if(contains(passwordWindow)) {					// if password is empty: show error message window					if(passwordWindow.txtPassword.text == '') {						showMessageWindow("Voer een wachtwoord in!");						return;					} else {						gamePassword = passwordWindow.txtPassword.text;						removeChild(passwordWindow);					}				} else {					passwordWindow.txtPassword.text = '';										addChild(passwordWindow);										passwordWindow.x = stage.stageWidth / 2.0;					passwordWindow.y = stage.stageHeight / 2.0;										return;				}			}						var xml:XML = <a>							<t>queue</t>							<w>join</w>							<g>{selectedGameId}</g>							<p>{gamePassword}</p>						  </a>;						// send XML to join game..			NetController.send(xml);		}				// NET - send leave game queue		private function leaveGame(event:MouseEvent):void {			if(gameId == 0) return;						var xml:XML = <a>							<t>queue</t>							<w>leave</w>						  </a>;						NetController.send(xml);						gameId = 0;			gameOwner = 0;			gameWaitForPlayers = 0;						dpPlayerList.removeAll();						iGame.visible = false;			iQueue.visible = true;						gameControls();		}				private function _resizeFields(event:Event = null):void {			stage.focus = stage;						var width = stage.stageWidth;			var height = stage.stageHeight;						// update sizes (switch from big->side or side->big)			// only happens on showing 'create game' menu or 'start game' - or chat is offline.			// OR when the user has firefox with a weird zoom option...						var offset:Number = Math.floor(width / 2) - (180 / 2);					with(iQueue) {				lblOpenGames.x = offset - 10;								gameList.x = offset;				btnRefreshGameList.x = offset;								btnJoinGame.x = offset;				btnCreateGame.x = offset + btnJoinGame.width + 5;			}						with(iGame) {				playerList.x = offset;				btnLeaveGame.x = offset;				btnStartGame.x = offset + btnLeaveGame.width + 5;								lblGameName.x = offset;				lblPlayerCount.x = offset;								soundOnFull.x = 30 + offset;			}					// center message windows:			var messageWindow:Sprite;			if(messageWindow = Sprite(getChildByName("messageWindow"))) {				messageWindow.x = width / 2.0;				messageWindow.y = height / 2.0;			}						var createGame:Sprite;			if(createGame = Sprite(getChildByName("createGame"))) {				createGame.x = width / 2.0;				createGame.y = height / 2.0;			}						if(contains(passwordWindow)) {				passwordWindow.x = width / 2.0;				passwordWindow.y = height / 2.0;			}		}				// GFX - Message Window Control		private function showMessageWindow(text:String):void {			var messageWindow = new msgWindow();				messageWindow.name = "messageWindow";				messageWindow.errorText.text = text;				messageWindow.btnClose.addEventListener(MouseEvent.CLICK, closeMessageWindow);				messageWindow.x = stage.stageWidth / 2.0;				messageWindow.y = stage.stageHeight / 2.0;				messageWindow.btnClose.setFocus();						stage.focus = messageWindow.btnClose;			addChild(messageWindow);		}				private function closeMessageWindow(event:MouseEvent):void {			event.target.removeEventListener(MouseEvent.CLICK, closeMessageWindow);			removeChild(event.target.parent);		}				// NET - Set listeners for the NET Events		private function setListeners():void {			NetController.addEventListener(NetEvent.CONNECT, netEvents);			NetController.addEventListener(NetEvent.ERROR, netEvents);			NetController.addEventListener(NetEvent.DATA, parseData);			NetController.addEventListener(NetEvent.DISCONNECT, netEvents);		}				private function JavaScript(functionName:String, arguments:String = ""):String {			if(ExternalInterface.available) {				return ExternalInterface.call(functionName, arguments);			}			return null;		}	}}
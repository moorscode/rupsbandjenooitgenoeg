package com.moorscode.particles {	/*	 * The particle class, used together with the particleSystem class	 * @license Creative Commons by-nc-sa	 * @author Maxim Sprey <maximsprey@hotmail.com>	 * @version 0.5 - Still lots of room for improvement	 */	import flash.display.Shape;	import flash.utils.getTimer;	import flash.events.Event;	import flash.geom.Point;	import fl.motion.Color;	import flash.filters.BlurFilter;		public class particle extends Shape {		public var lifetime:Number; // Particle lifetime		public var spawntime:int = getTimer();		public var startSize:Number;		public var endSize:Number;		public var startColor:Number; // Particle color		public var midColor:Number;		public var endColor:Number; // Particle end color		public var midColorPercentage:Number = 0.75;		public var transparency:Number;		public var blurQuality:Number = 3;		public var startBlur:Number; // Blur at start		public var endBlur:Number; // Amount of blur added over lifetime		public var blur:BlurFilter = new BlurFilter;		public var vX:Number; // Horizontal velocity		public var vY:Number; // Vertical velocity		public var pX:Number; // x position source		public var pY:Number; // y position source				public var fadeAt:Number = 0.95;				protected var size:Number; // Particle size		protected var color:Number;		protected var trans:Number;							public function update():void {			this.pX += this.vX;			this.pY += this.vY;						var progress:Number = ((1 / lifetime) * (getTimer() - spawntime));						trans = transparency;						if(progress >= fadeAt) {				var fadeTime:Number = lifetime * (1-fadeAt);				var fadeProgress:Number = 1 - ((1 / (1-fadeAt)) * (progress - fadeAt));				trans = transparency * fadeProgress;			}			if(progress < midColorPercentage) {				color = Color.interpolateColor(startColor, midColor, progress * (1/midColorPercentage));			} else {				color = Color.interpolateColor(midColor, endColor, (progress - midColorPercentage) * (1/(1-midColorPercentage)));			}			/**/						if(startSize) {				size = startSize;				if(endSize) {					size += ((endSize - startSize) * progress);				}			}						_redraw();		}				public function drawShape():void {			graphics.clear();			graphics.beginFill(color, trans);			graphics.drawCircle(pX, pY, size);			graphics.endFill();		}				private function _redraw():void {			drawShape();						var progress:Number = ((1 / lifetime) * (getTimer() - spawntime));			var blurNow:Number = startBlur;			blurNow = startBlur + ((endBlur - startBlur) * progress);						if(blurNow > 0) {				blur.blurX = blurNow;				blur.blurY = blurNow;				blur.quality = blurQuality;								var filterArray:Array = [blur];				filters = filterArray;			}			/**/		}				public function meetDestruct():Boolean {			var age:int = getTimer() - spawntime;			return (age > lifetime);		}	}}
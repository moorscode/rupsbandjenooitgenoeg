package com.moorscode.particles {	/*	 * The particle system class, used to create multiple particles for a special effect like smoke, fire or explosions	 * @license Creative Commons by-nc-sa	 * @author Maxim Sprey <maximsprey@hotmail.com>	 * @version 0.5 - Still room for lots of improvement, email me for any later versions	 */	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.getDefinitionByName;	import flash.utils.getTimer;	import flash.utils.Timer;	import flash.text.TextField;		import com.moorscode.particles.*;		public class particleSystem extends Sprite {		public var lifetime:Number; // Particle lifetime		public var size:Number; // Particle size		public var endSize:Number;		public var transparency:Number;		public var startBlur:Number = 1; // Blur at start		public var startColor:Number;		public var endColor:Number;		public var vX:Number = 0; // Horizontal velocity (range)		public var vY:Number = 0; // Vertical velocity (range)		public var pX:Number = 0; // x position source		public var pY:Number = 0; // y position source		public var deviation:Number = 0; // the amount of random spread along speed		public var particles:uint = 0;		public var maxParticles:Number = 1;		public var particleClass:Class = particle;				public var explode:Boolean = false;		public var spawnrate:Timer;				public function particleSystem(x:Number, y:Number, xVelocity:Number, yVelocity, deviation:Number, maxParticles:Number):void {			this.pX = x;			this.pY = y;			this.vX = xVelocity;			this.vY = yVelocity;			this.deviation = deviation;			this.maxParticles = maxParticles;		}				public function setParticleType(particleClass:Class):void {			this.particleClass = particleClass;		}				public function start(target:Stage, depth:int = -1):void {			if(depth == -1) {				target.addChild(this);			} else {				target.addChildAt(this, depth);			}						// Add handler			particles = 0;						var p = new particleClass();			if(p.lifetime) lifetime = p.lifetime;			if(p.startSize) size = p.startSize;			if(p.endSize) endSize = p.endSize;			if(p.startBlur) startBlur = p.startBlur;			p = null;						addEventListener(Event.ENTER_FRAME,fLoop);			if(!this.explode){				spawnrate = new Timer(Math.round(lifetime/maxParticles));				spawnrate.addEventListener(TimerEvent.TIMER, time);				spawnrate.start();			}		}				public function stop():void {			// Remove handler			removeEventListener(Event.ENTER_FRAME,fLoop);			spawnrate.stop();		}				public function time(event:Event):void {			spawn();		}				public function fLoop(e:Event):void {			if(explode) {				doExplode(maxParticles / 2.0);			}						update();		}				public function doExplode(number:Number):void {			for(var i:int = 0; i < number; i++){				spawn();			}						explode = false;		}				public function spawn():void {			if(particles <= maxParticles){				var p:particle = new particleClass();								if(lifetime) 		p.lifetime = lifetime;				if(size) 			p.startSize = size;				if(endSize)			p.endSize = endSize;				if(startColor) 		p.startColor = startColor;				if(endColor) 		p.endColor = endColor;				if(transparency) 	p.transparency = transparency;				if(startBlur) 		p.startBlur = startBlur;								p.pX = pX;				p.pY = pY;				p.vX = vX + ((deviation*(Math.random()))-(0.5*deviation));				p.vY = vY + ((deviation*(Math.random()))-(0.5*deviation));								addChildAt(p as DisplayObject, 0);								++particles;			}		}				public function destroy(p:particle):void {			removeChild(p as DisplayObject);			--particles;		}				public function update():void {			for(var i:int = 0; i < numChildren; i++){				var p:particle = getChildAt(i) as particle;				if(p.meetDestruct()){					destroy(p);					i--;				} else {					p.update();				}			}		}	}}
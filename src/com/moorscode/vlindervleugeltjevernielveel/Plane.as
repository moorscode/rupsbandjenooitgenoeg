package com.moorscode.vlindervleugeltjevernielveel {	import flash.display.Sprite;	import flash.geom.Point;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.media.SoundChannel;		import com.moorscode.game.IGameObject;	import com.moorscode.game.GameObjectEvent;	import com.moorscode.sound.Audio;		public class Plane extends IGameObject {		private var body:Sprite;		protected var shootingFromSide:Boolean = false;				private var reloadTimer:Timer;		public var reloadTime:Number;		private var reloadResume:Number;		private var reloadTimerStarted:int = 0;				private var canShoot:Boolean = true;		private var unloading:Boolean = false;				private var engineSound:SoundChannel;		private var lastVolume:Number;				public function Plane(position:Point, reloadTime:Number = 2000):void {			super(position);						this.body = Sprite(addChild(getSprite("planeBody")));						engineSound = Audio.playMusic("plane.mp3", true, 0.0);						this.reloadTime = reloadTime;			reloadTimer = new Timer(reloadTime);			reloadTimer.addEventListener(TimerEvent.TIMER, releaseReloading);		}				public override function updateAudio(volume:Number, panning:Number):void {			Audio.adjust(engineSound, volume, panning);		}				public function shoot(event:Event = null):void {			if(canShoot) {				reloadTimer.start();				canShoot = false;								var now:Date = new Date();				reloadTimerStarted = now.getTime();								var xOffset:Number = 0;								// xOffset = ((shootingFromSide)?10:-10);								var shootEvent:GameObjectEvent = new GameObjectEvent(GameObjectEvent.SHOOT);					shootEvent.origin = new Point(this.x - xOffset, this.y);					shootEvent.rotation = this.rotation;					shootEvent.speed = this.speed;					shootEvent.targetObject = this;								dispatchEvent(shootEvent);								shootingFromSide = !shootingFromSide;			}		}				public override function mute():void {			if(unloading || !engineSound) return;						lastVolume = engineSound.soundTransform.volume;			Audio.volume(engineSound, 0);		}				public override function unmute():void {			if(alive && engineSound) {				Audio.volume(engineSound, lastVolume);			}		}				public override function pause(paused:Boolean = true):void {			super.pause(paused);						if(paused && reloadTimer.running) {				var now:Date = new Date();				reloadResume = reloadTimer.delay - (now.getTime() - reloadTimerStarted);				reloadTimer.stop();			}						if(!paused && reloadResume > 0) {				reloadTimer.delay = reloadResume;				reloadTimer.start();			}		}		private function releaseReloading(event:TimerEvent):void {			canShoot = true;						if(reloadResume > 0) {				reloadResume = 0;				reloadTimer.delay = reloadTime;			}						reloadTimer.stop();		}				// returns how much milliseconds remain on the reloader		public function get reloading():int {			if(reloadTimer.running) {				var now:Date = new Date();				return reloadTimer.delay - (now.getTime() - reloadTimerStarted);			}			return 0;		}				public override function unload():void {			unloading = true;						// remove all attached objects.			while(numChildren > 0) {				removeChildAt(0);			}						if(engineSound && engineSound) {				engineSound.stop();			}						engineSound = null;			body = null;						if(reloadTimer.running) {				reloadTimer.stop();			}						reloadTimer.removeEventListener(TimerEvent.TIMER, releaseReloading);			reloadTimer = null;		}	}}
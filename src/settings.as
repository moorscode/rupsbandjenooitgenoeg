package {	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.URLRequestMethod;		import flash.media.SoundChannel;	import flash.utils.ByteArray;	import fl.events.SliderEvent;	import com.moorscode.input.*;	import com.moorscode.sound.*;	public class settings extends Sprite {		private var assigningControl:String = "";		private var keySettings:Object = {btnKeyUp:87,btnKeyDown:83,btnKeyLeft:65,btnKeyRight:68};		private var volumeSettings:Object = {slideGlobalVolume:1,slideMusicVolume:1,slideFxVolume:1};				private var prevGfxSettings:String = 'default';		private var prevKeySettings:Object = new Object();		private var prevVolumeSettings:Object = new Object();				private var musicChannel:SoundChannel;		public function settings():void {			/** onClick event to buttons and sliders			  * get settings from PHP file			  * save settings to PHP			  */			btnKeyUp.addEventListener(MouseEvent.CLICK, handleKeyButton);			btnKeyDown.addEventListener(MouseEvent.CLICK, handleKeyButton);			btnKeyLeft.addEventListener(MouseEvent.CLICK, handleKeyButton);			btnKeyRight.addEventListener(MouseEvent.CLICK, handleKeyButton);			slideGlobalVolume.addEventListener(SliderEvent.CHANGE, updateVolume);			slideMusicVolume.addEventListener(SliderEvent.CHANGE, updateVolume);			slideFxVolume.addEventListener(SliderEvent.CHANGE, updateVolume);			btnSave.addEventListener(MouseEvent.CLICK, saveSettings);			btnClose.addEventListener(MouseEvent.CLICK, exit);			stage.addEventListener(KeyboardEvent.KEY_UP, assignKey);			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP;			msgConfirmClose.visible = false;			msgConfirmClose.btnBack.addEventListener(MouseEvent.CLICK, hideConfirm);			msgConfirmClose.btnClose.addEventListener(MouseEvent.CLICK, exit);						msgSaved.visible = false;			msgSaved.btnClose.addEventListener(MouseEvent.CLICK, hideSaved);						btnTestMusic.addEventListener(MouseEvent.CLICK, testSound);			btnTestFx.addEventListener(MouseEvent.CLICK, testSound);						Audio.path = "rupsbandjenooitgenoeg/";			addEventListener(Event.ENTER_FRAME, waitWhileLoading, false, 0, true);		}		private function waitWhileLoading(event:Event):void {			if (stage.loaderInfo.bytesTotal == stage.loaderInfo.bytesLoaded) {				removeEventListener(event.type, arguments.callee);				loadSettings();			}		}		private function loadSettings():void {			var url:URLLoader = new URLLoader();				url.addEventListener(Event.COMPLETE, parseSettings);				url.load(new URLRequest("assets/php/config.php"));		}		private function parseSettings(event:Event):void {			event.target.removeEventListener(event.type, arguments.callee);			if (event.target.data == "") {				for (var objects in this) {					this[objects].enabled = false;				}				btnSave.enabled = false;				return;			}			var xml:XML = XML(event.target.data);			volumeSettings.slideGlobalVolume = xml.volume.global;			volumeSettings.slideMusicVolume = xml.volume.music;			volumeSettings.slideFxVolume = xml.volume.fx;			keySettings.btnKeyUp = xml.keys.up;			keySettings.btnKeyDown = xml.keys.down;			keySettings.btnKeyLeft = xml.keys.left;			keySettings.btnKeyRight = xml.keys.right;						var dp:DataProvider = gfxStyle.dataProvider;						for(var index:int = 0; index < dp.length; index++) {				if(dp.getItemAt(index).label == xml.graphics) {					gfxStyle.selectedIndex = index;				}			}			/** Save settings to see if things have changed			  */			clone(keySettings, prevKeySettings);			clone(volumeSettings, prevVolumeSettings);						prevGfxSettings = xml.graphics;			for (var item in keySettings) {				this[item].label = KeyLabels.getLabel(keySettings[item]);			}			for (var item in volumeSettings) {				this[item].value = volumeSettings[item];				this[item.replace("slide","label")].text = "" + Math.ceil(100 * volumeSettings[item]) + "%";			}		}		private function saveSettings(event:MouseEvent):void {			btnSave.enabled = false;			var request:URLRequest = new URLRequest("assets/php/config.php");			var url:URLLoader = new URLLoader();			var variables:URLVariables = new URLVariables  ;			variables.global_volume = volumeSettings.slideGlobalVolume;			variables.music_volume = volumeSettings.slideMusicVolume;			variables.fx_volume = volumeSettings.slideFxVolume;			variables.key_forward = keySettings.btnKeyUp;			variables.key_back = keySettings.btnKeyDown;			variables.key_left = keySettings.btnKeyLeft;			variables.key_right = keySettings.btnKeyRight;						variables.graphics = gfxStyle.selectedItem.data;			request.data = variables;			request.method = URLRequestMethod.POST;			url.addEventListener(Event.COMPLETE, saveComplete);			url.load(request);		}		private function saveComplete(event:Event):void {			// Save completed!			btnSave.enabled = true;			/** Update last saved settings			  */			clone(keySettings, prevKeySettings);			clone(volumeSettings, prevVolumeSettings);						prevGfxSettings = gfxStyle.selectedItem.data;			/** Show confirmation of save!			  */			msgSaved.visible = true;		}				private function hideSaved(event:MouseEvent):void {			msgSaved.visible = false;			JavaScript("closeSettings");		}				private function testSound(event:MouseEvent):void {			switch(event.target.name) {				case "btnTestMusic":					if(event.target.label == 'stop') {						musicChannel.stop();						musicChannel = null;						event.target.label = 'test';					} else {						musicChannel = Audio.playMusic("menuMusic.mp3");						event.target.label = 'stop';					}					break;				case "btnTestFx":					Audio.playSound("explosion.mp3");					break;			}		}		private function updateVolume(event:SliderEvent):void {			var volume = event.value;			volumeSettings[event.target.name] = volume;			this[event.target.name.replace("slide","label")].text = "" + Math.ceil(100 * volume) + "%";						switch(event.target.name) {				case "slideGlobalVolume":					Audio.globalVolume = volume;					break;				case "slideMusicVolume":					Audio.musicVolume = volume;					break;				case "slideFxVolume":					Audio.fxVolume = volume;					break;			}		}		private function assignKey(event:KeyboardEvent):void {			var key:int = event.keyCode;			if (assigningControl != "") {				// remove the key if it is already assigned!				for (var button in keySettings) {					if (keySettings[button] == key) {						keySettings[button] = 0;						this[button].label = "";					}				}				// assign the key to the button and the settings				keySettings[assigningControl] = key;				this[assigningControl].label = KeyLabels.getLabel(key);				this[assigningControl].toggle = false;				this[assigningControl].toggle = true;				// stop listening for keys				assigningControl = "";			}		}		private function handleKeyButton(event:MouseEvent):void {			// if current is assignable, deactivate it			// if current is !assignable but assignable active, deactivate that, activate this			// if none is assignable, just assign this			if (assigningControl == event.target.name) {				assigningControl = "";				event.target.label = KeyLabels.getLabel(keySettings[event.target.name]);				return;			} else if (assigningControl != "") {				this[assigningControl].toggle = false;				this[assigningControl].label = KeyLabels.getLabel(keySettings[assigningControl]);				this[assigningControl].toggle = true;			}			assigningControl = event.target.name;			event.target.label = "";		}		private function hideConfirm(event:MouseEvent):void {			msgConfirmClose.visible = false;		}		private function exit(event:MouseEvent):void {			var match:Boolean = true;			for (var item in keySettings) {				match = match && (keySettings[item] == prevKeySettings[item]);			}			for (var item in volumeSettings) {				match = match && (volumeSettings[item] == prevVolumeSettings[item]);			}						match = match && (prevGfxSettings == gfxStyle.selectedItem.data);			if (msgConfirmClose.visible == false && ! match) {				// show alert, not yet saved settings!				msgConfirmClose.visible = true;				return;			}			JavaScript("closeSettings");		}		private function JavaScript(functionName:String, arguments:String = ""):String {			if (ExternalInterface.available) {				return ExternalInterface.call(functionName, arguments);			}			return null;		}		private function clone(source:Object, destination:Object):void {			for (var item in source) {				destination[item] = source[item];			}		}	}}